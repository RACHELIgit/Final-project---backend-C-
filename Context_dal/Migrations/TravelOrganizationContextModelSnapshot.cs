// <auto-generated />
using System;
using Context_dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Contextdal.Migrations
{
    [DbContext(typeof(TravelOrganizationContext))]
    partial class TravelOrganizationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Entities.AgeGroup", b =>
                {
                    b.Property<int>("AgeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgeGroupId"));

                    b.Property<string>("AgeGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgeGroupId");

                    b.ToTable("AgeGroup");
                });

            modelBuilder.Entity("Repositories.Entities.Categories", b =>
                {
                    b.Property<int>("CategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriesId"));

                    b.Property<bool>("CategoriesByUser")
                        .HasColumnType("bit");

                    b.Property<string>("CategoriesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriesId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Repositories.Entities.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Repositories.Entities.ItemToCategory", b =>
                {
                    b.Property<int>("ItemToCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemToCategoryId"));

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("ItemToCategoryId");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("ItemsId");

                    b.HasIndex("UsersId");

                    b.ToTable("ItemToCategory");
                });

            modelBuilder.Entity("Repositories.Entities.ItemTravelToUser", b =>
                {
                    b.Property<int>("ItemTravelToUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemTravelToUserId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("DidTake")
                        .HasColumnType("bit");

                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Reminder")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReminderDeatiles")
                        .HasColumnType("datetime2");

                    b.Property<int>("TravelToUserId")
                        .HasColumnType("int");

                    b.HasKey("ItemTravelToUserId");

                    b.HasIndex("ItemsId");

                    b.HasIndex("TravelToUserId");

                    b.ToTable("ItemTravelToUser");
                });

            modelBuilder.Entity("Repositories.Entities.Items", b =>
                {
                    b.Property<int>("ItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemsId"));

                    b.Property<int>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("ItemsImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccupationId")
                        .HasColumnType("int");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ItemsId");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("GenderId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("SectorId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Repositories.Entities.Occupation", b =>
                {
                    b.Property<int>("OccupationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OccupationId"));

                    b.Property<string>("OccupationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OccupationId");

                    b.ToTable("Occupation");
                });

            modelBuilder.Entity("Repositories.Entities.ReasonTravel", b =>
                {
                    b.Property<int>("ReasonTravelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonTravelId"));

                    b.Property<string>("ReasonTravelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonTravelId");

                    b.ToTable("ReasonTravel");
                });

            modelBuilder.Entity("Repositories.Entities.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectorId"));

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectorId");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("Repositories.Entities.TimeTravel", b =>
                {
                    b.Property<int>("TimeTravelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeTravelId"));

                    b.Property<string>("TimeTravelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TimeTravelId");

                    b.ToTable("TimeTravel");
                });

            modelBuilder.Entity("Repositories.Entities.TravelToUser", b =>
                {
                    b.Property<int>("TravelToUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelToUserId"));

                    b.Property<string>("Descriebe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxWeight")
                        .HasColumnType("int");

                    b.Property<int>("ReasonTravelId")
                        .HasColumnType("int");

                    b.Property<int>("TimeTravelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TravelToUserDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TravelToUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("TravelToUserId");

                    b.HasIndex("ReasonTravelId");

                    b.HasIndex("TimeTravelId");

                    b.HasIndex("UsersId");

                    b.ToTable("TravelToUser");
                });

            modelBuilder.Entity("Repositories.Entities.Users", b =>
                {
                    b.Property<int>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsersId"));

                    b.Property<int?>("AgeGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<int?>("OccupationId")
                        .HasColumnType("int");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsersName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsersId");

                    b.HasIndex("AgeGroupId");

                    b.HasIndex("GenderId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("SectorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Repositories.Entities.ItemToCategory", b =>
                {
                    b.HasOne("Repositories.Entities.Categories", "Categories")
                        .WithMany("ItemToCategoriel")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Items", "Items")
                        .WithMany("ItemToCategoriel")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Users", "Users")
                        .WithMany("ItemToCategoriel")
                        .HasForeignKey("UsersId");

                    b.Navigation("Categories");

                    b.Navigation("Items");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repositories.Entities.ItemTravelToUser", b =>
                {
                    b.HasOne("Repositories.Entities.Items", "Items")
                        .WithMany("ItemTravelToUserl")
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.TravelToUser", "TravelToUser")
                        .WithMany("ItemTravelToUserl")
                        .HasForeignKey("TravelToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("TravelToUser");
                });

            modelBuilder.Entity("Repositories.Entities.Items", b =>
                {
                    b.HasOne("Repositories.Entities.AgeGroup", "AgeGroup")
                        .WithMany("Itemsl")
                        .HasForeignKey("AgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Gender", "Gender")
                        .WithMany("Itemsl")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Occupation", "Occupation")
                        .WithMany("Itemsl")
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Sector", null)
                        .WithMany("Itemsl")
                        .HasForeignKey("SectorId");

                    b.Navigation("AgeGroup");

                    b.Navigation("Gender");

                    b.Navigation("Occupation");
                });

            modelBuilder.Entity("Repositories.Entities.TravelToUser", b =>
                {
                    b.HasOne("Repositories.Entities.ReasonTravel", "ReasonTravel")
                        .WithMany("TravelToUserl")
                        .HasForeignKey("ReasonTravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.TimeTravel", "TimeTravel")
                        .WithMany("TravelToUserl")
                        .HasForeignKey("TimeTravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Entities.Users", "Users")
                        .WithMany("TravelToUserl")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReasonTravel");

                    b.Navigation("TimeTravel");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repositories.Entities.Users", b =>
                {
                    b.HasOne("Repositories.Entities.AgeGroup", null)
                        .WithMany("Usersl")
                        .HasForeignKey("AgeGroupId");

                    b.HasOne("Repositories.Entities.Gender", "Gender")
                        .WithMany("Usersl")
                        .HasForeignKey("GenderId");

                    b.HasOne("Repositories.Entities.Occupation", "Occupation")
                        .WithMany("Usersl")
                        .HasForeignKey("OccupationId");

                    b.HasOne("Repositories.Entities.Sector", "Sector")
                        .WithMany("Usersl")
                        .HasForeignKey("SectorId");

                    b.Navigation("Gender");

                    b.Navigation("Occupation");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Repositories.Entities.AgeGroup", b =>
                {
                    b.Navigation("Itemsl");

                    b.Navigation("Usersl");
                });

            modelBuilder.Entity("Repositories.Entities.Categories", b =>
                {
                    b.Navigation("ItemToCategoriel");
                });

            modelBuilder.Entity("Repositories.Entities.Gender", b =>
                {
                    b.Navigation("Itemsl");

                    b.Navigation("Usersl");
                });

            modelBuilder.Entity("Repositories.Entities.Items", b =>
                {
                    b.Navigation("ItemToCategoriel");

                    b.Navigation("ItemTravelToUserl");
                });

            modelBuilder.Entity("Repositories.Entities.Occupation", b =>
                {
                    b.Navigation("Itemsl");

                    b.Navigation("Usersl");
                });

            modelBuilder.Entity("Repositories.Entities.ReasonTravel", b =>
                {
                    b.Navigation("TravelToUserl");
                });

            modelBuilder.Entity("Repositories.Entities.Sector", b =>
                {
                    b.Navigation("Itemsl");

                    b.Navigation("Usersl");
                });

            modelBuilder.Entity("Repositories.Entities.TimeTravel", b =>
                {
                    b.Navigation("TravelToUserl");
                });

            modelBuilder.Entity("Repositories.Entities.TravelToUser", b =>
                {
                    b.Navigation("ItemTravelToUserl");
                });

            modelBuilder.Entity("Repositories.Entities.Users", b =>
                {
                    b.Navigation("ItemToCategoriel");

                    b.Navigation("TravelToUserl");
                });
#pragma warning restore 612, 618
        }
    }
}
